#!/usr/bin/env node
var answers, dashdash, e, found, goygoy, help, options, opts, parser, pkg, places, question, request, suggest, suggestResponse, unknownResponse;

request = require('request');

dashdash = require('dashdash');

pkg = require('../package.json');

places = require('../places.json');

request.get('https://raw.githubusercontent.com/egemsoft/kamuran/master/places.json', function(error, response, body) {
  if (!error && response.statusCode === 200) {
    places = JSON.parse(body);
  }
  places.lunch = places.common.concat(places.lunch);
  return places.dinner = places.common.concat(places.dinner);
});

suggestResponse = function(place) {
  var responses;
  responses = ["" + place + " hiç fena olmaz.", "" + place + " nasıl fikir?", "Ne dersin, " + place + " uyar mı?", "" + place + " iyidir " + (place.toLowerCase()), "Neden " + place + " olmasın?"];
  return responses[Math.floor(Math.random() * responses.length)];
};

suggest = function() {
  var date, type;
  date = new Date();
  type = date.getHours() < 14 ? 'lunch' : 'dinner';
  return console.log(suggestResponse(places[type][Math.floor(Math.random() * places[type].length)]));
};

goygoy = function() {
  return console.log('İyidir hacı, aynı bildiğin gibi.');
};

unknownResponse = function() {
  console.log('Her şeyi bilmiyorum maalesef.');
  return {
    responses: {
      suggest: suggest,
      goygoy: goygoy
    }
  };
};

answers = [
  {
    answer: suggest,
    questions: ['suggest', 'nereye gidelim', 'nereye gidelim?', 'nereye gideyim', 'nereye gideyim?', 'ne dersin', 'ne dersin?']
  }, {
    answer: goygoy,
    questions: ['ne yaptın', 'ne yaptın?']
  }
];

options = [
  {
    names: ['version', 'v'],
    type: 'bool',
    help: 'Print kamuran version, some shameless self promotion and exit.'
  }, {
    names: ['question', 'q'],
    type: 'string',
    help: 'Ask question to kamuran. Such as: "nereye gidelim?"'
  }, {
    names: ['suggest', 's'],
    type: 'bool',
    help: 'Ask kamuran to suggest a place.'
  }, {
    names: ['help', 'h'],
    type: 'bool',
    help: 'Help.'
  }
];

parser = dashdash.createParser({
  options: options
});

try {
  opts = parser.parse(process.argv);
} catch (_error) {
  e = _error;
  console.error('kamuran: error: %s', e.message);
  process.exit(1);
}

if (opts.version) {
  console.log(" " + pkg.name + " - v" + pkg.version + "\n", "by " + pkg.author + "\n", "" + pkg.description + "\n");
} else if (opts.suggest) {
  suggest();
} else if (opts.question) {
  question = opts.question;
  found = false;
  if (opts._args.length > 0) {
    question += ' ' + opts._args.join(' ');
  }
  answers.forEach(function(answer) {
    if (answer.questions && typeof answer.questions === 'object' && answer.questions.indexOf(question) > -1) {
      found = true;
      return answer.answer();
    } else if (answer.question && typeof answer.question === 'string' && answer.question === question) {
      found = true;
      return answer.answer();
    }
  });
  if (found === false) {
    unknownResponse();
  }
} else {
  help = parser.help({
    helpincludeEnv: true
  }).trimRight();
  console.log('usage: kamuran [OPTIONS]\n', 'options:\n', help);
}
